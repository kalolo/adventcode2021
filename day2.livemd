<!-- vim: set syntax=markdown: -->
# Day2

## Setup

```elixir
Mix.install([
  {:kino, "~> 0.4.1"}
])
```

## Day2 - Part1

```elixir
input =
  Kino.Input.textarea("Day2 input?",
    default: """
    forward 5
    down 5
    forward 8
    up 3
    down 8
    forward 2
    """
  )
```

```elixir
defmodule Day2 do
  def normalize_instruction([instruction, distance]) do
    {String.to_existing_atom(instruction), String.to_integer(distance)}
  end

  def normalize_instruction(instruction) do
    instruction
    |> String.split(" ")
    |> normalize_instruction()
  end

  def move_position({:forward, distance}, %{horizontal: horizontal} = acc) do
    Map.put(acc, :horizontal, horizontal + distance)
  end

  def move_position({:down, distance}, %{depth: depth} = acc) do
    Map.put(acc, :depth, depth + distance)
  end

  def move_position({:up, distance}, %{depth: depth} = acc) do
    Map.put(acc, :depth, depth - distance)
  end

  def result(%{depth: depth, horizontal: horizontal}) do
    IO.puts("Depth: #{depth} Horizontal: #{horizontal} -> #{depth * horizontal}")
  end
end

input
|> Kino.Input.read()
|> String.splitter("\n", trim: true)
|> Enum.map(&Day2.normalize_instruction/1)
|> Enum.map(&IO.inspect/1)
|> Enum.reduce(%{horizontal: 0, depth: 0}, &Day2.move_position/2)
|> Day2.result()
```
